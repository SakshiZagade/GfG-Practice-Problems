//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// Function to return minimum number of jumps to end of array

class Solution {
  public:
    int minJumps(vector<int>& arr) {
        // code here
        int n = arr.size();
        
        // Edge case: single element
        if (n == 1) return 0;

        // Edge case: first element is 0
        if (arr[0] == 0) return -1;

        int jumps = 0, current_end = 0, farthest = 0;

        for (int i = 0; i < n - 1; i++) {
            farthest = max(farthest, i + arr[i]);

            // If we've reached the end of the current jump range
            if (i == current_end) {
                jumps++;
                current_end = farthest;

                // If we can't go further
                if (current_end >= n - 1) break;

                if (current_end <= i) return -1;
            }
        }

        return (current_end >= n - 1) ? jumps : -1;
        
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        int n, i, j;
        vector<int> arr;
        string ip;
        int number;
        getline(cin, ip);
        stringstream ss(ip);

        while (ss >> number) {
            arr.push_back(number);
        }
        Solution obj;
        cout << obj.minJumps(arr) << endl << "~\n";
    }
    return 0;
}

// } Driver Code Ends
